Type A(필수과제)

- 이미지를 검색해서 보관함에 수집하는 안드로이드 앱을 구현합니다.
- 키워드를 입력하고 검색을 누르면 이미지 검색 결과 리스트를 보여주도록 구현합니다.
- 이미지 검색 API는 ([**링크**](https://developers.kakao.com/docs/latest/ko/daum-search/dev-guide#search-image))의 thumbnail_url 필드를 사용합니다.
- UI는 fragment 2개를 사용합니다.(버튼이나 탭 선택 시 전환)

1️⃣ MainActivity

- Fragment를 보여줄 FrameLayout을 만들고, 하단에 2개의 버튼(이미지 검색, 내보관함) 을 생성합니다.
- MainActivity 시작시 이미지 검색 fragment를 초기화면에 설정합니다.

2️⃣ 이미지 **검색 Fragment**

- [ v ]  검색어를 입력할 수 있도록 검색창을 구현합니다.
- [ v ]  검색어를 입력하고 검색 버튼을 누르면 검색된 이미지 리스트를 보여줍니다.
- [ v ]  검색 버튼을 누르면 키보드는 숨김 처리하도록 구현합니다.
- [ v ]  API 검색 결과에서 thumbnail_url, display_sitename, datetime을 받아오도록 구현 합니다.
- [ v ]  RecyclerView의 각 아이템 레이아웃을 썸네일 이미지, 사이트이름, 날짜 시간 으로 구현 합니다.
- [ v ]  API 검색 결과를 RecyclerView에 표시하도록 구현합니다.
- [ v ]  날짜 시간은 "yyyy-MM-dd HH:mm:ss” 포멧으로 노출되도록 구현합니다.
- [ v ]  검색 결과는 최대 80개까지만 표시하도록 구현합니다.
- [ v ]  리스트에서 특정 이미지를 선택하면 **특별한 표시**를 보여주도록 구현합니다. (좋아요/별표/하트 등)
- [ mvvm ]  선택된 이미지는 MainActivity의 ‘선택된 이미지 리스트 변수’에 저장합니다.
- [ v ]  마지막 검색어는 저장 되며, 앱 재시작시 마지막 검색어가 검색창 입력 필드에 자동으로 입력됩니다.

3️⃣ **내 보관함 Fragment**

- [ mvvm ]  MainActivity의 ‘선택된 이미지 리스트 변수’에서 데이터를 받아오도록 구현합니다.
- [ v ]  내보관함 Recyclerview는 ‘이미지는 검색’ 과 동일하게 구현합니다.
- [ v ]  내보관함에 보관된 이미지를 선택하면 보관함에서 제거할 수 있도록 구현합니다.

## 2.  개발 요건

- 검색 데이터는 https://developers.kakao.com/product/search 의 Open API를 사용합니다.
- 오픈 소스 사용 가능합니다. (retrofit, glide등..)

🅰️타입(필수)

- Kotlin Language
- UI Layout
- Fragment
- RecyclerView, Adapter
- SharedPreference
- OpenAPI, Retrofit, JSON

🅱️타입(선택)

- A타입(필수) 사전지식 +
- MVVM 패턴
- ViewModel / LiveData
- Bottom Navigation
- Algorithm (sort..)

Type B (선택)

## 1.  A타입에서 달라지는 기능

- 공통
    - [ v ]  MainActivity의 하단 메뉴를 Bottom Navigation 또는 ViewPager+tablayout으로 변경
    - [ v ]  MVVM 패턴을 적용합니다. (ViewModel, LiveData)
    - [ v ]  검색 결과 화면은 보관함을 다녀와도 유지됩니다.
    - [  ]  보관한 이미지 리스트는 앱 재시작 후 다시 보여야 합니다.

- 첫 번째 fragment : 검색 결과
    - [ v ]  검색은 키워드 하나에 이미지 검색과 동영상 검색을 동시에 사용, 두 검색 결과를 합친 리스트를 사용합니다.
    - [ v ]  동영상 검색은 API는 ([**링크**](https://developers.kakao.com/docs/latest/ko/daum-search/dev-guide#search-video))의 thumbnail 필드를 사용합니다.
    - [ v ]  두 검색 결과를 datetime 필드를 이용해 정렬하여 출력합니다. (최신부터 나타나도록)
    - [ v ]  검색 결과 아이템에 [Image] 또는 [Video]를 표시합니다.
    - [ ]  검색 결과화면에서 마지막 결과로 스크롤시 다음 페이지가 자동 검색 되도록 구현합니다.(무한스크롤 기능)
    - [ ]  스크롤을 최상단으로 이동시키는 플로팅 액션 버튼을 추가합니다.
    - [ v ]  아이템 선택시 SharedPreference에 저장합니다. (DB 사용 금지) -> 이거 때문에 보관함이랑 검색이랑 뷰모델 나눠야 할 듯?

- 두 번째 fragment: 내 보관함
    - [ v ]  SharedPreference에 저장된 리스트를 불러와 화면에 표시합니다.
    - [  ]  보관함에서 이미지 선택시 저장 리스트에서 삭제되며 화면에서도 삭제되도록 구현합니다.

- 적혀있지 않은 내용은 자유롭게 작성하시면 됩니다. (요건을 침해하지 않는 범위에서 기능 추가 등)

0.이미지 세로 크기 가져와서 staggergridlayout 적용시키고,
getLayoutParams().height 로 세로 크기 각각 다르게 적용시켜보기 -> stagger로 해결
0.무한 스크롤 시 로딩을 아래에 둘지 화면 위에 둘지? -> 아래에다 두고, 아래 다음 아이템에 멀티뷰타입으로 처리
0.addLoading 이 데이터가 없으면 더 이상 실행되지 않도록 해야 함
1.LiveData -> Flow로 바꿀 수 있을까?
2.Hilt 추가 가능할까?
3.페이징으로 바꿀 수는 있을까?

무한 스크롤 할 때 코루틴으로 하나만 돌아가게 할 수 있나?

해결해야 할 것
1. 보관함엔 저장되는데 그게 검색에서 안 나옴
2.